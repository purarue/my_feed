#!/usr/bin/env python3

"""
This is an interactive program that prompts me to map MAL episodes to
TMDB entries, with season/offset information, so that I can display
nice episode screenshots in the frontend instead of the same
image over and over
"""

import os
import typing
import json
from pathlib import Path

from trakt_watch.__main__ import _search_trakt, MovieId, TVShowId
from trakt.tv import TVShow, TVSeason
import my.mal.export as mal
from my_feed.sources.mal import TMDBInfo, load_mal_tmdb_mapping, TMDBMapping, SeasonInfo

import click

fl = os.environ.get("MAL_TMDB_MAPPING")
if not fl:
    raise ValueError("set MAL_TMDB_MAPPING")
flp = Path(fl)
TMDB_MAPPING: TMDBMapping = load_mal_tmdb_mapping()


def write_to_file() -> None:
    data_ser = json.dumps(TMDB_MAPPING, indent=2)
    flp.write_text(data_ser)


def _iter_anime_info(above_episodes: int = 0) -> typing.Iterator[mal.AnimeData]:
    for an in mal.anime():
        if an.username != os.environ["MAL_USERNAME"]:
            continue
        if len(an.history) == 0:
            continue
        if above_episodes > 0:
            if len(an.history) >= above_episodes:
                yield an
        else:
            yield an


Strategy = typing.Literal[
    "most_watched", "recent", "oldest", "popular", "mean", "score"
]


def _pick_next_mal_item(
    strategy: Strategy = "most_watched",
    above_episodes: int = 0,
) -> typing.Iterator[mal.AnimeData]:
    items = list(_iter_anime_info(above_episodes=above_episodes))
    if strategy == "recent":
        items.sort(key=lambda x: x.history[-1].at, reverse=True)
    elif strategy == "oldest":
        items.sort(key=lambda x: x.history[0].at)
    elif strategy == "most_watched":
        items.sort(key=lambda x: x.watched_seconds, reverse=True)
    elif strategy == "mean":
        items.sort(
            key=lambda x: (
                x.APIList.mean
                if x.APIList is not None and x.APIList.mean is not None
                else 0
            ),
            reverse=True,
        )
    elif strategy == "score":
        items.sort(key=lambda x: x.XMLData.score or 0, reverse=True)
    else:
        items.sort(
            key=lambda x: x.APIList.popularity if x.APIList is not None else 99999999999
        )
    yield from items


@click.command(help=__doc__)
@click.option(
    "--strategy",
    type=click.Choice(typing.get_args(Strategy)),
    default=typing.get_args(Strategy)[1],
    help="How to pick next item to pick",
    show_default=True,
)
@click.option(
    "--above-episodes",
    type=int,
    default=0,
    help="Only prompt anime with this number of episodes or more",
)
@click.option(
    "--dry-run",
    is_flag=True,
)
def main(strategy: Strategy, above_episodes: int, dry_run: bool) -> None:
    for anime in _pick_next_mal_item(strategy=strategy, above_episodes=above_episodes):
        if str(anime.id) in TMDB_MAPPING:
            continue
        if anime.XMLData.media_type.casefold() in ["movie", "music"]:
            continue
        if dry_run:
            click.echo(f"{anime.id} {anime.XMLData.title}")
            continue
        titles = []
        if anime.APIList:
            titles.append(anime.APIList.title)
            for alt in anime.APIList.alternative_titles.values():
                if isinstance(alt, str):
                    titles.append(alt)
                elif isinstance(alt, list):
                    titles.extend(alt)
        elif anime.XMLData:
            titles.append(anime.XMLData.title)

        termsize = os.get_terminal_size()
        click.echo("=" * (termsize.columns))
        click.echo(f"https://myanimelist.net/anime/{anime.id}")
        click.echo(f"Episodes: {anime.XMLData.episodes}", nl=False)
        if anime.APIList and anime.APIList.season:
            click.echo(f" Season: {anime.APIList.season.year}")
        else:
            click.echo()
        for title in titles:
            click.secho(f"  {title}", fg="blue")

        for item in titles:
            assert isinstance(item, str), f"{item} {type(item)} not a string"

        ignore_default = anime.XMLData.media_type.casefold() == "special" or any(
            "ova" in item.casefold().split() for item in titles
        )

        if click.confirm("Ignore?", default=ignore_default):
            TMDB_MAPPING[str(anime.id)] = None
            write_to_file()
            continue

        prompt = ""
        if click.confirm(f"Use {titles[0]}?", default=True):
            prompt = titles[0]
        chosen = _search_trakt(
            default_media_type="show" if anime.XMLData.episodes > 1 else None,
            prompt_str=prompt,
        )
        if isinstance(chosen, MovieId):
            confirmed = anime.XMLData.episodes == 1
            if not confirmed:  # if source anime has more than one episode
                if click.confirm(
                    "has more than one episode, use movie entry?", default=False
                ):
                    confirmed = True
            if confirmed:
                mv = chosen.trakt()
                ids = mv.ids["ids"]
                trakt_id = ids["trakt"]
                tmdb_id = ids["tmdb"]
                assert isinstance(trakt_id, int), f"trk_id: {trakt_id} {ids}"
                assert isinstance(tmdb_id, int), f"tmdb_id: {tmdb_id} {ids}"
                TMDB_MAPPING[str(anime.id)] = TMDBInfo(
                    trakt_id=trakt_id,
                    tmdb_id=tmdb_id,
                    media_type="movie",
                    title=anime.XMLData.title,
                    season=None,
                    episode_offset=None,
                    season_info=[],
                )
                write_to_file()
        elif isinstance(chosen, TVShowId):
            tv: TVShow = chosen.trakt()
            seasons: typing.List[TVSeason] = [
                s for s in tv.seasons if isinstance(s, TVSeason)
            ]
            non_zero = [s for s in seasons if s.season > 0]
            total_episodes = sum(len(s) for s in non_zero)

            # if this happens to match, then we're all good
            if total_episodes == anime.XMLData.episodes:
                click.secho(f"Number of episodes match: {total_episodes}", fg="green")
                ids = tv.ids["ids"]
                trakt_id = ids["trakt"]
                tmdb_id = ids["tmdb"]
                assert isinstance(trakt_id, int), f"trk_id: {trakt_id} {ids}"
                assert isinstance(tmdb_id, int), f"tmdb_id: {tmdb_id} {ids}"
                TMDB_MAPPING[str(anime.id)] = TMDBInfo(
                    trakt_id=trakt_id,
                    tmdb_id=tmdb_id,
                    media_type="tv",
                    title=anime.XMLData.title,
                    # this means start at season 1 and just offset the IDs normally
                    season=None,
                    episode_offset=None,
                    season_info=[
                        SeasonInfo(num=s.season, ep_count=len(s.episodes))
                        for s in seasons
                    ],
                )
                write_to_file()
                click.echo(f"https://trakt.tv/shows/{trakt_id}")
                click.echo(f"https://themoviedb.org/tv/{tmdb_id}")
            else:
                click.secho(
                    f"Could not match trakt {total_episodes} to MAL {anime.XMLData.episodes}",
                    fg="red",
                )
                # see if one of the seasons matches?
                click.echo(
                    f"https://trakt.tv/shows/{tv.ids['ids'].get('trakt_slug') or tv.ids['ids'].get('trakt')}"
                )
                for i, ssn in enumerate(seasons):
                    color = (
                        "green" if len(ssn.episodes) == anime.XMLData.episodes else None
                    )
                    click.secho(
                        f"  {i}. MAL {anime.XMLData.episodes} | Trakt Season {ssn.season} {len(ssn.episodes)}",
                        fg=color,
                    )
                resp = click.prompt("Pick season, or U to ignore").lower()
                if resp == "u":
                    TMDB_MAPPING[str(anime.id)] = None
                    write_to_file()
                elif resp.isnumeric():
                    chosen = seasons[int(resp)]
                    chosen_season = chosen.season
                    confirmed = len(chosen.episodes) == anime.XMLData.episodes
                    offset: int | None = None
                    if not confirmed:
                        click.secho(
                            f"Could not match {len(chosen.episodes)} to {anime.XMLData.episodes}",
                            fg="red",
                        )
                        if click.confirm(
                            "Set anyways (N to mark offset)?", default=False
                        ):
                            confirmed = True
                        else:
                            offset = int(
                                click.prompt("How many episodes to offset by", type=int)
                            )
                            assert offset < len(
                                chosen.episodes
                            ), f"offset {offset} > {len(chosen.episodes)}"
                    if confirmed or offset is not None:
                        ids = tv.ids["ids"]
                        trakt_id = ids["trakt"]
                        tmdb_id = ids["tmdb"]
                        assert isinstance(trakt_id, int), f"trk_id: {trakt_id} {ids}"
                        assert isinstance(tmdb_id, int), f"tmdb_id: {tmdb_id} {ids}"
                        TMDB_MAPPING[str(anime.id)] = TMDBInfo(
                            trakt_id=trakt_id,
                            tmdb_id=tmdb_id,
                            media_type="tv",
                            title=anime.XMLData.title,
                            season=chosen_season,
                            episode_offset=offset,
                            season_info=[
                                SeasonInfo(num=s.season, ep_count=len(s.episodes))
                                for s in seasons
                            ],
                        )
                        click.echo(f"https://trakt.tv/shows/{trakt_id}")
                        click.echo(f"https://themoviedb.org/tv/{tmdb_id}")
                        write_to_file()
                    else:
                        raise ValueError("TODO: offset here maybe? fail?")
                else:
                    raise ValueError("Invalid input {}")
        else:
            raise ValueError(f"Invalid input type: {type(chosen)}")


if __name__ == "__main__":
    main()
