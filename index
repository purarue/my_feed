#!/usr/bin/env bash
# if FEED_REINDEX=1 ./index , this deletes
# the remote database and re-builds it

set -e

declare RESET SSH_TARGET
RESET=
SSH_TARGET="${SSH_TARGET:-vultr}"

# if we want to delete the remote database
[[ -n "$FEED_REINDEX" ]] && RESET=1
declare -rx RESET

if ((RESET)); then
	echo "Reindexing..."
else
	echo "Indexing..."
fi

wait-for-internet -q --timeout 30 || exit 0

THIS_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
cd "${THIS_DIR}" || exit $?

source "$HPIDATA/tokens"

declare -a CURL_AUTH_OPTS=()
if [[ -n "$MY_FEED_SECRET" ]]; then
	CURL_AUTH_OPTS=("-H" "token:$MY_FEED_SECRET")
fi

# set prefix for indexer
export RUNELITE_PHOTOS_PREFIX='https://sean.fish/p/'

# sync osrs images
REMSYNC_PUBLIC=1 "${REPOS}/vps/remsync" "$(python3 -m my.utils.backup_to runelite_screenshots)" >/dev/null || exit $?

# temporary dir for new data
TMPDIR="$(mktemp -d)"
# https://github.com/seanbreckenridge/core/blob/main/shellscripts/epoch
PICKLE="${TMPDIR}/$(epoch).pickle" || exit $?

# warm tz cache incase its expired
hpi doctor -S my.time.tz.via_location

# run an index
my_feed index "$PICKLE" || exit $?

wait-for-internet -q --timeout 30 || exit 0

# delete remote pickle's if we want to reset
if [[ -n "$RESET" ]]; then
	ssh "${SSH_TARGET}" 'rm -vf ~/code/my_feed/backend/data/*.pickle'
fi

# copy up to the server
scp "${PICKLE}" "${SSH_TARGET}":~/code/my_feed/backend/data

# delete temp file
rm -f "${PICKLE}"

if [[ -n "$RESET" ]]; then
	echo 'Deleting database...'
	set -x
	ssh "${SSH_TARGET}" 'rm -vf ~/code/my_feed/backend/feeddata.sqlite && ~/vps/super --ctl restart feed-backend'
	set +x
	echo '(remote is rebuilding database, should be done in a couple seconds)'
else
	# otherwise this is just new data, just ping the server to check for new files
	echo 'Running update...'
	curl "${CURL_AUTH_OPTS[@]}" -sL 'https://sean.fish/feed_api/check'
	echo
fi
